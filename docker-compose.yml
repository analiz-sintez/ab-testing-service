services:
  app:
    build: .
    ports: # HOST_PORT:CONTAINER_PORT
      - "8080:8080"
      - "8081:80"
    depends_on:
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_started
      kafka:
        condition: service_started
    environment:
      - CONFIG_FILE=/app/config/config.yaml

  migrator:
    image: golang:1.23-alpine
    volumes:
      - ./migrations:/migrations
    entrypoint: >
      sh -c "
      apk add --no-cache git && 
      go install github.com/pressly/goose/v3/cmd/goose@latest &&
      goose -dir /migrations postgres \"postgresql://abtest:abtest@postgres:5432/abtest?sslmode=disable\" up
      "
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

  postgres:
    image: postgres:latest
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    environment:
      POSTGRES_USER: abtest
      POSTGRES_PASSWORD: abtest
      POSTGRES_DB: abtest
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8000:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  kafka:
    image: confluentinc/cp-kafka:7.7.1.arm64
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:29092" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://localhost:9092
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true

  kafka-consumer:
    environment:
      kafkaURL: kafka:29092
      topic: "ab-test-stats"
      groupID: "proxy_stats_consumer"
      postgresURL: postgresql://abtest:abtest@postgres:5432/abtest?sslmode=disable
    build:
      context: .
      dockerfile: stat-consumer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
