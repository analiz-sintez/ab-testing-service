services:

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "${BACKEND_PORT:-8080}:8080"
      - "${SERVICE_PORT:-8081}:80"
    depends_on:
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      - CONFIG_FILE=/app/config/config.yaml
    networks:
      - default

  frontend:
    build:
      context: ./web
      dockerfile: ../Dockerfile.frontend
    ports:
      - "${FRONTEND_PORT:-8000}:80"
    depends_on:
      backend:
        condition: service_started
    environment:
      - BACKEND_PORT=${BACKEND_PORT:-8080}
    networks:
      - default

  migrator:
    build:
      context: .
      dockerfile: Dockerfile.migrator
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - default

  postgres:
    image: postgres:latest
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    environment:
      POSTGRES_USER: abtest
      POSTGRES_PASSWORD: abtest
      POSTGRES_DB: abtest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - default

  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - default

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      SERVER_SERVLET_CONTEXT_PATH: /kafka-ui
    networks:
      - default

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:29092" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://localhost:${KAFKA_PORT:-9092}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${KAFKA_PORT:-9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - default

  kafka-consumer:
    environment:
      kafkaURL: kafka:29092
      topic: "ab-test-stats"
      groupID: "proxy_stats_consumer"
      postgresURL: postgresql://abtest:abtest@postgres:5432/abtest?sslmode=disable
    build:
      context: .
      dockerfile: stat-consumer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - default

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-39090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=/prom/'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - default

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SERVER_ROOT_URL: "http://localhost:${FRONTEND_PORT:-8000}/grafana"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
      GF_SECURITY_COOKIE_SECURE: "false"
      GF_SECURITY_COOKIE_SAMESITE: "disabled"
    networks:
      - default

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge