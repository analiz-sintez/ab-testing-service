<template>
  <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

  <div class="fixed inset-0 z-10 overflow-y-auto">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
      <div
          class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
        <form @submit.prevent="handleSubmit">
          <div>
            <h3 class="text-base font-semibold leading-6 text-gray-900">
              {{ proxy ? 'Edit Proxy' : 'Create New Proxy' }}
            </h3>
            <div class="mt-4 space-y-4">
              <div>
                <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
                <input
                    type="text"
                    id="name"
                    v-model="form.name"
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    placeholder="Enter proxy name"
                />
              </div>
              <div>
                <div class="flex items-center justify-between">
                  <label class="block text-sm font-medium text-gray-700">Listen URLs</label>
                  <div class="flex items-center">
                    <span class="text-xs text-gray-500 mr-1">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </span>
                    <span class="text-xs text-gray-500">Multiple URLs can be used for the same proxy</span>
                  </div>
                </div>
                
                <div class="mt-2 space-y-3 border rounded-md p-3 bg-gray-50">
                  <div v-for="(url, index) in form.listen_urls" :key="index" 
                       class="flex items-center gap-2 p-2 rounded-md"
                       :class="{ 'bg-blue-50 border border-blue-200': index === 0 }">
                    
                    <div class="flex-grow">
                      <div v-if="index === 0" class="flex items-center mb-1">
                        <span class="text-xs font-semibold text-blue-600 bg-blue-100 px-2 py-0.5 rounded-full">Primary URL</span>
                      </div>
                      <input
                          type="text"
                          v-model="form.listen_urls[index]"
                          class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                          :class="{ 'border-blue-300': index === 0 }"
                          placeholder="Enter listen URL (e.g., localhost:8080)"
                          @blur="validateListenUrl(index)"
                      />
                      <div v-if="urlErrors[index]" class="mt-1 text-xs text-red-600">
                        {{ urlErrors[index] }}
                      </div>
                    </div>
                    
                    <button
                        type="button"
                        @click="removeListenUrl(index)"
                        class="p-1 rounded-full hover:bg-gray-200"
                        :disabled="form.listen_urls.length <= 1 && index === 0"
                        :class="{ 'opacity-30 cursor-not-allowed': form.listen_urls.length <= 1 && index === 0 }"
                        title="Remove this URL"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                  
                  <button
                      type="button"
                      @click="addListenUrl"
                      class="flex items-center justify-center w-full py-2 border border-dashed border-gray-300 rounded-md text-sm text-indigo-600 hover:text-indigo-900 hover:bg-indigo-50 transition-colors"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    Add Another Listen URL
                  </button>
                </div>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Mode</label>
                <select
                    v-model="form.mode"
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                >
                  <option value="path">Path</option>
                  <option value="redirect">Redirect</option>
                </select>
              </div>

              <!-- Route Condition -->
              <div>
                <label class="block text-sm font-medium text-gray-700">Route Condition</label>
                <div class="mt-2 space-y-4">
                  <div>
                    <select
                        v-model="form.condition.type"
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    >
                      <option value="">No condition</option>
                      <option value="header">Header</option>
                      <option value="query">Query Parameter</option>
                      <option value="cookie">Cookie</option>
                      <option value="user_agent">User Agent</option>
                      <option value="language">Language</option>
                      <option value="expr">Expression</option>
                    </select>
                  </div>

                  <!-- Parameter Name -->
                  <div v-if="form.condition.type && form.condition.type !== 'language' && form.condition.type !== 'expr'">
                    <label class="block text-sm font-medium text-gray-700">
                      {{ form.condition.type === 'user_agent' ? 'User Agent Parameter' : 'Parameter Name' }}
                    </label>
                    <select
                        v-if="form.condition.type === 'user_agent'"
                        v-model="form.condition.param_name"
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    >
                      <option value="platform">Platform (Mobile/Desktop)</option>
                      <option value="browser">Browser</option>
                    </select>
                    <input
                        v-else
                        v-model="form.condition.param_name"
                        type="text"
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        :placeholder="getParamPlaceholder(form.condition.type)"
                    />
                  </div>
                  
                  <!-- Single Expression -->
                  <div v-if="form.condition.type === 'expr'">
                    <label class="block text-sm font-medium text-gray-700">Single Expression</label>
                    <textarea
                        v-model="form.condition.expr"
                        rows="3"
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                        placeholder="headers['user-agent'] contains 'iPhone' ? 'target-1' : 'target-2'"
                    ></textarea>
                    <p class="mt-1 text-sm text-gray-500">
                      Expression should return a target ID based on request properties
                    </p>
                  </div>

                  <!-- Values -->
                  <div v-if="form.condition.type && form.condition.type !== 'expr'">
                    <label class="block text-sm font-medium text-gray-700">Values</label>
                    <div class="mt-2 space-y-2">
                      <div
                          v-for="(target, index) in form.targets"
                          :key="target.id"
                          class="flex items-center gap-2"
                      >
                        <input
                            v-model="form.condition.values[target.id || index]"
                            type="text"
                            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                            :placeholder="getValuePlaceholder(form.condition.type, form.condition.param_name)"
                        />
                        <span class="text-sm text-gray-500">â†’</span>
                        <span class="text-sm text-gray-700">{{ target.url }}</span>
                      </div>
                    </div>
                    <p class="mt-1 text-sm text-gray-500">
                      {{ getConditionHelp(form.condition.type, form.condition.param_name) }}
                    </p>
                  </div>
                  
                  <!-- Multiple Expressions -->
                  <div v-if="form.condition.type === 'expr' && !form.condition.expr">
                    <label class="block text-sm font-medium text-gray-700">Target Expressions</label>
                    <div class="mt-2 space-y-2">
                      <div
                          v-for="(target, index) in form.targets"
                          :key="target.id"
                          class="flex items-center gap-2"
                      >
                        <textarea
                            v-model="form.condition.values[target.id || index]"
                            rows="2"
                            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                            placeholder="headers['user-agent'] contains 'iPhone'"
                        ></textarea>
                        <span class="text-sm text-gray-500">â†’</span>
                        <span class="text-sm text-gray-700">{{ target.name || target.url }}</span>
                      </div>
                    </div>
                    <p class="mt-1 text-sm text-gray-500">
                      Each expression should evaluate to a boolean. The first expression that evaluates to true will be used.
                    </p>
                  </div>

                  <!-- Default Target -->
                  <div v-if="form.condition.type">
                    <label class="block text-sm font-medium text-gray-700">Default Target</label>
                    <select
                        v-model="form.condition.default"
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    >
                      <option
                          v-for="target in form.targets"
                          :key="target.id"
                          :value="target.id"
                      >
                        {{ target.name || target.url }}
                      </option>
                    </select>
                  </div>
                </div>
              </div>

              <!-- Add this before the Save Cookies checkbox -->
              <div class="mt-4">
                <div class="relative flex items-start">
                  <div class="flex h-6 items-center">
                    <input
                        id="saving_cookies_flg"
                        v-model="form.saving_cookies_flg"
                        type="checkbox"
                        class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"
                    />
                  </div>
                  <div class="ml-3 text-sm leading-6">
                    <label for="saving_cookies_flg" class="font-medium text-gray-900">Save Cookies</label>
                    <p class="text-gray-500">Enable cookie persistence across requests</p>
                  </div>
                </div>
              </div>

              <!-- Add this after the Save Cookies checkbox -->
              <div class="mt-4">
                <div class="relative flex items-start">
                  <div class="flex h-6 items-center">
                    <input
                        id="query_forwarding_flg"
                        v-model="form.query_forwarding_flg"
                        type="checkbox"
                        class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"
                    />
                  </div>
                  <div class="ml-3 text-sm leading-6">
                    <label for="query_forwarding_flg" class="font-medium text-gray-900">Forward Query Parameters</label>
                    <p class="text-gray-500">Enable forwarding of query parameters to target URLs</p>
                  </div>
                </div>
              </div>

              <!-- Add this after the Query Forwarding checkbox -->
              <div class="mt-4">
                <div class="relative flex items-start">
                  <div class="flex h-6 items-center">
                    <input
                        id="cookies_forwarding_flg"
                        v-model="form.cookies_forwarding_flg"
                        type="checkbox"
                        class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"
                    />
                  </div>
                  <div class="ml-3 text-sm leading-6">
                    <label for="cookies_forwarding_flg" class="font-medium text-gray-900">Forward Cookies as Query Parameters</label>
                    <p class="text-gray-500">Enable forwarding of cookies as query parameters to target URLs</p>
                  </div>
                </div>
              </div>

              <!-- Tags and Targets -->
              <div>
                <TagsInput
                    v-model="form.tags"
                    :available-tags="availableTags"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Targets</label>
                <div v-for="(target, index) in form.targets" :key="index" class="mt-2 flex items-center gap-2">
                  <input
                      v-model="target.url"
                      type="text"
                      required
                      placeholder="Target URL with optional query"
                      pattern="^(https?:\/\/)?([\da-z.\-]+\.)*[\da-z.\-]+\.([a-z.]{2,6})(\/[\w.\-]*)*(\?[\w.%\-]+(=[\w.%\-]*)?(&[\w.%\-]+(=[\w.%\-]*)?)*)?(#[\w%\-]*)?$"
                      class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  />
                  <input
                      v-model="target.name"
                      type="text"
                      placeholder="Target Name"
                      class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  />
                  <input
                      v-model.number="target.weight"
                      type="number"
                      min="0"
                      max="100"
                      placeholder="Weight"
                      class="block w-20 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  />
                  <button
                      type="button"
                      @click="removeTarget(index)"
                      class="text-red-600 hover:text-red-900"
                  >
                    Remove
                  </button>
                </div>
                <button
                    type="button"
                    @click="addTarget"
                    class="mt-2 text-sm text-indigo-600 hover:text-indigo-900"
                >
                  Add Target
                </button>
              </div>
            </div>
          </div>
          <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
            <button
                type="submit"
                class="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:col-start-2"
            >
              {{ proxy ? 'Save Changes' : 'Create' }}
            </button>
            <button
                type="button"
                @click="closeModal"
                class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import TagsInput from "@/components/TagsInput.vue";
import ListenUrlsSection from "@/components/modals/ListenUrlsSection.vue";
import TargetsSection from "@/components/modals/TargetsSection.vue";
import RouteConditionSection from "@/components/modals/RouteConditionSection.vue";
import SettingsSection from "@/components/modals/SettingsSection.vue";
import {ref, nextTick, computed} from "vue";

type Target = {
  id?: string;
  name?: string;
  url: string;
  weight: number;
  is_active?: boolean
}

type Form = {
  name: string;
  listen_url: string; // Keeping for backward compatibility
  listen_urls: string[];
  mode: string;
  tags: string[];
  targets: Target[];
  saving_cookies_flg: boolean;
  query_forwarding_flg: boolean;
  cookies_forwarding_flg: boolean;
  condition: {
    type: string;
    param_name: string;
    values: Record<string, string>;
    default: string;
    expr?: string;
  };
};

type Proxy = Form & {
  id: string
}

const props = defineProps<{
  proxy: Proxy | null;
  availableTags: string[];
  form: Form;
}>()

const emit = defineEmits(['close', 'submit'])

const closeModal = () => {
  emit('close')
}

const form = ref(props.form)
const urlErrors = ref({})

// Create a computed property for the settings section that syncs with form
const settings = computed({
  get: () => ({
    saving_cookies_flg: form.value.saving_cookies_flg,
    query_forwarding_flg: form.value.query_forwarding_flg,
    cookies_forwarding_flg: form.value.cookies_forwarding_flg
  }),
  set: (val) => {
    form.value.saving_cookies_flg = val.saving_cookies_flg
    form.value.query_forwarding_flg = val.query_forwarding_flg
    form.value.cookies_forwarding_flg = val.cookies_forwarding_flg
  }
})

// Initialize listen_urls if it doesn't exist
if (!form.value.listen_urls) {
  form.value.listen_urls = form.value.listen_url ? [form.value.listen_url] : []
}

// Ensure there's at least one listen URL
if (form.value.listen_urls.length === 0) {
  form.value.listen_urls.push('')
}

const validateAllListenUrls = () => {
  // Clear all previous errors
  urlErrors.value = {}
  
  // Validate each URL
  let isValid = true
  form.value.listen_urls.forEach((url, index) => {
    // Check if URL is empty
    if (!url || url.trim() === '') {
      urlErrors.value[index] = 'Listen URL cannot be empty'
      isValid = false
      return
    }
    
    // Basic URL format validation
    const urlPattern = /^(localhost|(\d{1,3}\.){3}\d{1,3}|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*))(:([0-9]{1,5}))?(\/.*)?\$/
    if (!urlPattern.test(url)) {
      urlErrors.value[index] = 'Please enter a valid URL format'
      isValid = false
      return
    }
    
    // Check for duplicate URLs
    const duplicateIndex = form.value.listen_urls.findIndex((u, i) => u === url && i !== index)
    if (duplicateIndex !== -1) {
      urlErrors.value[index] = 'This URL is already in the list'
      isValid = false
    }
  })
  
  return isValid
}

const handleSubmit = () => {
  // Validate all listen URLs before submission
  if (!validateAllListenUrls()) {
    // Scroll to the first error
    nextTick(() => {
      const errorElement = document.querySelector('.text-red-600')
      if (errorElement) {
        errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' })
      }
    })
    return
  }
  const formData = {
    name: form.value.name,
    listen_url: form.value.listen_urls[0] || '', // For backward compatibility
    listen_urls: form.value.listen_urls,
    mode: form.value.mode,
    tags: form.value.tags,
    saving_cookies_flg: form.value.saving_cookies_flg,
    query_forwarding_flg: form.value.query_forwarding_flg,
    cookies_forwarding_flg: form.value.cookies_forwarding_flg,
    condition: form.value.condition,
    targets: form.value.targets.map(t => ({
      name: t.name || '',
      url: t.url,
      weight: t.weight / 100,
      is_active: t.is_active ?? true
    }))
  }
  emit('submit', formData)
}

function addTarget() {
  form.value.targets.push({
    name: '',
    url: '',
    weight: 50,
    is_active: true
  })
}

function removeTarget(index) {
  form.value.targets.splice(index, 1)
}

function addListenUrl() {
  if (!form.value.listen_urls) {
    form.value.listen_urls = []
  }
  // Add a new empty URL to the list
  const newIndex = form.value.listen_urls.length
  form.value.listen_urls.push('')
  
  // Focus on the newly added input field after the DOM updates
  nextTick(() => {
    const inputs = document.querySelectorAll('input[placeholder="Enter listen URL (e.g., localhost:8080)"]')
    if (inputs && inputs[newIndex]) {
      // Cast to HTMLInputElement to access focus method
      (inputs[newIndex] as HTMLInputElement).focus()
    }
  })
}

function removeListenUrl(index) {
  form.value.listen_urls.splice(index, 1)
  // Clear any errors for this index
  delete urlErrors.value[index]
  // Reindex the errors object after removal
  const newErrors = {}
  Object.keys(urlErrors.value).forEach(key => {
    const numKey = parseInt(key)
    if (numKey > index) {
      newErrors[numKey - 1] = urlErrors.value[key]
    } else if (numKey < index) {
      newErrors[numKey] = urlErrors.value[key]
    }
  })
  urlErrors.value = newErrors
}

function validateListenUrl(index) {
  const url = form.value.listen_urls[index]
  
  // Clear previous error for this index
  delete urlErrors.value[index]
  
  // Skip validation if empty (we'll handle this during form submission)
  if (!url || url.trim() === '') {
    return
  }
  
  // Basic URL format validation
  // Allow localhost, IP addresses, and domain names with optional port
  const urlPattern = /^(localhost|((\d{1,3}\.){3}\d{1,3})|([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*))(:([0-9]{1,5}))?(\/.*)?$/
  
  if (!urlPattern.test(url)) {
    urlErrors.value[index] = 'Please enter a valid URL format'
  }
  
  // Check for duplicate URLs
  const duplicateIndex = form.value.listen_urls.findIndex((u, i) => u === url && i !== index)
  if (duplicateIndex !== -1) {
    urlErrors.value[index] = 'This URL is already in the list'
  }
}

function getParamPlaceholder(type) {
  switch (type) {
    case 'header':
      return 'X-Custom-Header'
    case 'query':
      return 'version'
    case 'cookie':
      return 'user_preference'
    default:
      return ''
  }
}

function getValuePlaceholder(type, param) {
  switch (type) {
    case 'user_agent':
      return param === 'platform' ? 'mobile/desktop' : 'chrome/firefox/safari/edge/ie'
    case 'language':
      return 'en/es/fr/de'
    default:
      return 'Value for target'
  }
}

function getConditionHelp(type, param) {
  switch (type) {
    case 'user_agent':
      if (param === 'platform') {
        return 'Route traffic based on device type: mobile or desktop'
      }
      return 'Route traffic based on browser type: chrome, firefox, safari, edge, ie, or other'
    case 'language':
      return 'Route traffic based on preferred language from Accept-Language header (e.g., en, es, fr)'
    case 'header':
      return 'Route traffic based on a custom HTTP header value'
    case 'query':
      return 'Route traffic based on a URL query parameter value'
    case 'cookie':
      return 'Route traffic based on a cookie value'
    case 'expr':
      return 'Route traffic using custom expressions with access to request properties'
    default:
      return ''
  }
}
</script>